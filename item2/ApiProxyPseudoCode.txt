## API Proxy Pseudo Code ##

// Inicializa a classe api_proxy
Initialize class api_proxy
	
	// Define o endpoint de conexão e alguns parâmetros iniciais
	Set protected endpoint = "https://api.punkapi.com/v2/beers"
	Set protected ratelimit = 3600
	Set protected rateremaining = 3587
	Set protected beer_name = "?"
	Set protected abv_gt = "?"
	Set protected abv_lt = "?"
	Set protected ibu_gt = "?"
	Set protected ibu_lt = "?"
	Set protected ebc_gt = "?"
	Set protected ebc_lt = "?"

	//Define postfields
	Set protected postfields = array

	//Define Parameters
	postfields['name'] 				= beer_name ? beer_name : ''
	postfields['abv_gt'] 				= abv_gt ? abv_gt : ''
	postfields['abv_lt'] 				= abv_lt ? abv_lt : ''
	postfields['ibu_gt'] 				= ibu_gt ? ibu_gt : 0
	postfields['ibu_lt'] 				= ibu_lt ? ibu_lt : 0
	postfields['ebc_gt'] 				= ebc_gt ? ebc_gt : 0
	postfields['ebc_lt'] 				= ebc_lt ? ebc_lt : 0

	//Define Pagination (especificar qual página::page e o número de registros por requisição::per_page)
	Set protected page = 1
	Set protected per_page = 10
	postfields['page']	 				= page ? page : 0
	postfields['per_page']	 			= per_page ? per_page : 0


	//Define http header
	Set protected httpHeader = array

	//Define número de requestes por minuto (limite por hora * X)
	Set _x = 1
	httpHeader['ratelimit'] 		= ratelimit * _x
	httpHeader['rateremaining'] 	= rateremaining

	// chama o método conectar informando o endpoint e os dois demais parâmetros
	call method connect(endpoint, ratelimit, rateremaining, postfields)


// finaliza a classe api_proxy
 End class api_proxy


// Inicializa o método connect
// Define o valor inicial dos parâmetros
Initialize class connect(string endpoint = '', int ratelimit = 3600, int rateremaining = 3587, array postfields, array httpHeader)
	//Inicializa e armazena request curl
	Set _curlExec = curl_init()

	//Define option endpoint do request
	curl_opt(_curlExec, CURL_URL, endpoint)

	//Define option header do request
	curl_opt(_curlExec, CURL_HEADER, TRUE)
	curl_opt(_curlExec, CURLO_HTTPHEADER, httpHeader)

	//Habilita POST request
	curl_opt(_curlExec, CURL_POST, true)

	//Instancia parametros POST
	curl_opt(_curlExec, CURL_POSTFIELDS, postfields)

	//Executa o request e armazena em variável
	Set exec = curl_exec(_curlExec)

	//Armazena o statos da requisição
	Set httpCode = curl_getinfo(_curlExec, CURLINFO_HTTP_CODE)

	//Fecha conexão externa
	curl_close(_curlExec)

	//Tratativa de erros http caso o status não for OK
	if httpCode != 200
		//envia erro ao browser do usuário
	    call method error_message(int httpCode)
	endif

	//Armazena response em um objeto JSON
	Set JSON ENCODE OBJECT exec

	//imprime JSON para usuário
	imprime json(exec)

// finaliza a classe connect
End class connect

// Inicializa o método error_message para informações de erro
Initialize method error_message(int httpCode)
	//defini lista pública de erros e atende ao OCP
	Initialize method imprimeErro(List<code> httpCode)
		foreach( var code in httpCode)
			code.imprimir()
		endforeach
	End method imprimeErro

// finaliza a classe error_message
End class error_message


//Mensagem erro 400
Initialize class Erro400 : code
	Initialize method imprimir()
		imprime mensagem 'Erro 400!'
	End method imprimir
End class error_message
para cada novo código de erro a ser tratada a mensagem par ao usuário, incluir os demais classes no mesmo formato da anterior...